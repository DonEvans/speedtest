<h2>One algorithm. Four different languages.</h2>
<br>
<img src="/images/languageSpeedComparison.jpg" alt="Bar chart">

<h2>Java</h2>
<p>Java runs the fastest, finding every prime under 50,000 in 121 ms on my system. I wrote the original code in Java, because it is the language with which I am most familiar. Java is also the least expressive language, with the most lines of code. </p>

<p>Java's massive library could greatly reduce coding time on projects which make use of it. The complex object oriented structure is of little help for my program, but could be very useful on large projects.</p>

<p>When it comes to deployability, Java has a big advantage over PHP or Ruby. Java claims to be 'write once, run anywhere', and Java virtual machines are available for most systems</p>

<h2>Javascript</h2>
<p>I was very surprised to find out the Javascript can run nearly as fast as Java. I had expected it to be much slower. On Chrome, it found every prime under 50,000 in 162 ms. The latest generation of browsers runs Javascript about 10 to 20 times faster than the older ones. On speed, Javascript now looks like a real rival to Java. </p>

<p>Javascript is also a more expressive language, getting the job done in fewer lines of code. I found it easy to port the code from Java to Javascript. However, it lacks Java's huge library and object oriented features. Javascript, of course, is unsuitable for any program that needs access to the hard drive.</p>

<p>The big advantage of Javascript is its incredible deployability. Simply put the code in a web page, and anybody anywhere can download and run the program when they access your web page. There is nothing to install, and no security worries.</p>

<h2>PHP</h2>
<p>PHP runs about 70 times slower than Java on my system. However, I found it the fastest language to write code in. It is more expressive than Java or Javascript, and it makes writing code easier. PHP does have object oriented features, but unlike Java you are not forced to use them.</p>

<p>This speed test may be a little unfair to PHP, since the language is usually used to serve web pages, not for integer arithmetic.</p>

<h2>Ruby</h2>
<p>I was surprised at how much faster Ruby 1.9.2 was than PHP. It is a big improvement over Ruby 1.8.7. Ruby is still much much slower than Java or Javascript. Ruby is the most expressive language, but I found it slower to write code in than PHP. Ruby is more different from Java than PHP, and the error messages tend to be cryptic.<p>

<h2>Code Listings</h2>
<div id="codeContainer1">
<div id="lefty">
<h2>Java (81 lines, 1498 characters)</h2>
<br>
<pre>
<code>
import java.util.*;

public class ComputerSpeedTest {

  private ArrayList<Integer> list = new ArrayList<Integer>();
  public static final int PRIMES_LESS_THAN = 50000;
  private long startTime, finishTime, elapsedTime;
	
  public static void main(String[] args) {
    ComputerSpeedTest instance = new ComputerSpeedTest();
    instance.go();
  }
	 
  public void go(){
    //Record start time
    Date startDate = new Date();
    startTime = startDate.getTime();
		
    //Start prime finding algorithm
    list.add(3);
    list.add(7);
    list.add(9);
    int decade = 1;
    int counter = (PRIMES_LESS_THAN/10) -1;
		
    while (counter > 0) {
      primeFinder(decade);
      ++decade;
      --counter;
    }

    //Record finish time and find elapsed time.
    Date finishDate = new Date();
    finishTime = finishDate.getTime();
    elapsedTime = finishTime - startTime;
		
    System.out.println((list.size()+ 1) + " primes less than " +  PRIMES_LESS_THAN);  
    //Add 1 to list size to get correct number of primes to allow for 2 and 5.
    System.out.println("Time to complete = " + elapsedTime + " milliseconds.");
  }
		
    public void outputPrimes () {
      int counter2 = 30;
      for (int prime : list){
        System.out.print(prime + " ");
        --counter2;
        if (counter2 < 0){
          System.out.println("");
          counter2 = 30;
        }
      }
    }
	
  public void primeFinder(int decade) {
    //Generate candidates, don't bother with even numbers
    // or anything ending in 5.
    int[] candidates = new int[4];
    candidates[0] = decade*10 + 1;
    candidates[1] = decade*10 + 3;
    candidates[2] = decade*10 + 7;
    candidates[3] = decade*10 + 9;
		
    //Test each candidate against known primes excluding 2 and 5.
    for (int candidate : candidates) {
      int listSize = list.size();
      int index = 0;
			
      while (listSize > 0){
        int prime = list.get(index);
        if (candidate%prime == 0){
          break;
        }else if(listSize == 1){
          list.add(candidate);
        }
        ++index;
        --listSize;
      }
    }
  }
}

</code>
</pre>
</div>

<div>
<h2>Javascript (61 lines, 1194 characters)</h2>
<br>
<pre>
<code>
//Computer speed test in Javascript

  var list = new Array();
  var PRIMES_LESS_THAN = 50000;
  var startTime, finishTime, elapsedTime;

  //Record start time
  var startDate = new Date();
  startTime = startDate.getTime();

  //Start prime finding algorithm
  list.push(3);
  list.push(7);
  list.push(9);
  var decade = 1;
  var counter = (PRIMES_LESS_THAN/10) -1;
	
  while (counter > 0) {
    primeFinder(decade);
    decade++;
    counter--;
  }

//Record finish time and find elapsed time.
  var finishDate = new Date();
  finishTime = finishDate.getTime();
  elapsedTime = finishTime - startTime;

  document.write((list.length + 1) + " primes less than " + PRIMES_LESS_THAN + "...");
//Add 1 to list size to get correct number of primes to allow for 2 and 5.
  var lastPrimeIndex = list.length - 1;
  document.write(" Time to complete = " + elapsedTime + " milliseconds.");
	
function primeFinder(decade) {

	//Generate candidates, don't bother with even numbers
	// or anything ending in 5.
	var candidates = new Array(4);
	candidates[0] = decade*10 + 1;
	candidates[1] = decade*10 + 3;
	candidates[2] = decade*10 + 7;
	candidates[3] = decade*10 + 9;
	
	//Test each candidate against known primes excluding 2 and 5.
  for (i=0; i<4; i++) {
    var candidate = candidates[i];
    var listSize = list.length;
    var index = 0;
		
    while (listSize > 0) {
      var prime = list[index];
      if (candidate%prime == 0){
        break;
      }else if(listSize == 1) {
        list.push(candidate);
      }
      ++index;
      --listSize;
    }
  }
}

</code>
</pre>
</div>
</div>


<div id="php">
<h2>PHP (52 lines, 982 characters)</h2>
<pre>
<code>
//Computer speed test in PHP
define("PRIMES_LESS_THAN",  50000);

//Record start time
$startTime = time();

//Start prime finding algorithm
$list = array(3,7,9);
$decade = 1;
$counter = (PRIMES_LESS_THAN/10) -1;

while ($counter > 0) {
	primeFinder($decade);
	$decade++;
	$counter--;
}

//Record finish time and find elapsed time.
$finishTime = time();
$elapsedTime = $finishTime - $startTime;

echo (list.sizeof() + 1)." primes less than ".PRIMES_LESS_THAN."<br>";
//Add 1 to list size to get correct number of primes to allow for 2 and 5.
echo "Time to complete = ".$elapsedTime." milliseconds.";

function primeFinder($decade) {

	//Generate candidates, don't bother with even numbers
	// or anything ending in 5
	$candidates[] = $decade*10 + 1;
	$candidates[] = $decade*10 + 3;
	$candidates[] = $decade*10 + 7;
	$candidates[] = $decade*10 + 9;
	
	global $list[];
	//Test each candidate against known primes excluding 2 and 5.
	foreach ($candidates as $candidate) {
		$listSize = $list.sizeof();
		$index = 0;
		
		while ($listSize > 0) {
			$prime = $list[$index];
			if ($candidate%$prime == 0) {
				break;
			}elseif($listSize == 1) {
				$list[] = $candidate;
			}
			++$index;
			--$listSize;
		}
	}
}
</code>
</pre>
</div>

<div>
<h2>Ruby (48 lines, 844 characters)</h2>
<pre>
<code>
# Computer speed test in Ruby
	$list = [3,7,9]
	primes_less_than = 50000
	decade = 1

	def primeFinder(d)
	#Generate candidates, don't bother with even numbers
	# or anything ending in 5.
		candidates = Array.new
		candidates << d*10 + 1
		candidates << d*10 + 3
		candidates << d*10 + 7
		candidates << d*10 + 9
			
		#Test each candidate against known primes excluding 2 and 5.
		candidates.each { |candidate|
			listSize = $list.length
			index = 0
				
			while listSize > 0
				prime = $list[index]
				if (candidate % prime == 0)
					break
				elsif listSize == 1
					$list << candidate
				end
				index += 1
				listSize -= 1
			end
		}
	end
	
	startTime = Time.now     #Record start time
	counter = (primes_less_than/10) - 1
	decade = 1

	while (counter > 0)
		primeFinder(decade)
		decade += 1
		counter -= 1
	end
		
	#Record finish time and elapsed time.
	elapsedTime = Time.now - startTime 
		
	#Add 1 to list size to get correct number of primes to allow for 2 and 5.
puts ($list.length + 1).to_s + ' primes less than ' +primes_less_than.to_s
puts "Time to complete = " + (elapsedTime*1000).to_s + " milliseconds."
</code>
</pre>
<br><br><br>
</div>


